let Joi,REFRESH_SECRET,RefreshToken,User,CustomErrorHandler,JwtService;_8c9‍.x([["default",()=>_8c9‍.o]]);_8c9‍.w("joi",[["default",["Joi"],function(v){Joi=v}]]);_8c9‍.w("../../config",[["REFRESH_SECRET",["REFRESH_SECRET"],function(v){REFRESH_SECRET=v}]]);_8c9‍.w("../../models",[["RefreshToken",["RefreshToken"],function(v){RefreshToken=v}],["User",["User"],function(v){User=v}]]);_8c9‍.w("../../services/CustomErrorHandler",[["default",["CustomErrorHandler"],function(v){CustomErrorHandler=v}]]);_8c9‍.w("../../services/JwtService",[["default",["JwtService"],function(v){JwtService=v}]]);





const refreshControllers = {
  async refresh(req, res, next) {
    // validate
    const refreshSchema = Joi.object({
      refresh_token: Joi.string().required(),
    });

    const { error } = refreshSchema.validate(req.body);
    if (error) {
      return next(error);
    }

    // check in  database
    let refresh_token;
    try {
      refresh_token = await RefreshToken.findOne({
        refresh_token: req.body.refresh_token,
      });
      if (!refresh_token) {
        return next(CustomErrorHandler.unAuthorized("Invalid refresh token!"));
      }

      let userId;
      try {
        const { _id } = JwtService.verify(
          req.body.refresh_token,
          REFRESH_SECRET
        );
        userId = _id;
      } catch (err) {
        return next(CustomErrorHandler.unAuthorized("Invalid refresh token!"));
      }

      // is user present in DB
      const user = User.findOne({ _id: userId });
      if (!user) {
        return next(CustomErrorHandler.unAuthorized("No user found!"));
      }

      // Token
      const access_token = JwtService.sign({ _id: user._id, role: user.role });
      const refresh_token_new = JwtService.sign(
        { _id: user._id, role: user.role },
        "1y",
        REFRESH_SECRET
      );
      // database whitelist refresh token (store refresh token in DB)
      await RefreshToken.create({ refresh_token: refresh_token_new });

      // send response
      res.json({ access_token, refresh_token: refresh_token_new });
    } catch (err) {
      return next(new Error("Something went wrong! " + err.message));
    }
  },
};

_8c9‍.d(refreshControllers);
