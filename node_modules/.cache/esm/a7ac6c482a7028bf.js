let Joi,CustomErrorHandler,User;_2a7‍.x([["default",()=>_2a7‍.o]]);_2a7‍.w("joi",[["default",["Joi"],function(v){Joi=v}]]);_2a7‍.w("../../services/CustomErrorHandler",[["default",["CustomErrorHandler"],function(v){CustomErrorHandler=v}]]);_2a7‍.w("../../models",[["User",["User"],function(v){User=v}]]);



const registerController = {
  async register(req, res, next) {
    // CHECKLIST
    // [] validate the request
    // [] authorize the request
    // [] check if user is in the database already
    // [] prepare model
    // [] store in database
    // [] generate jwt token
    // [] send response

    // validate
    const registerSchema = Joi.object({
      name: Joi.string().min(3).max(30).required(),
      email: Joi.string().email().required(),
      password: Joi.string()
        .pattern(new RegExp("^[a-zA-Z0-9]{3,30}$"))
        .required(),
      repeat_password: Joi.ref("password"),
    });
    const { error } = registerSchema.validate(req.body);

    if (error) {
      return next(error);
    }

    // check user is in the DB
    try {
      const exist = await User.exists({ email: req.body.email });
      if (exist) {
        return next(
          CustomErrorHandler.alreadyExist("This email is already taken.")
        );
      }
    } catch (err) {
      return next(err);
    }

    res.json({ msg: "Hello from express" });
  },
};

_2a7‍.d(registerController);
