let Joi,bcrypt,CustomErrorHandler,User,JwtService;_bdd‍.x([["default",()=>_bdd‍.o]]);_bdd‍.w("joi",[["default",["Joi"],function(v){Joi=v}]]);_bdd‍.w("bcrypt",[["default",["bcrypt"],function(v){bcrypt=v}]]);_bdd‍.w("../../services/CustomErrorHandler",[["default",["CustomErrorHandler"],function(v){CustomErrorHandler=v}]]);_bdd‍.w("../../models",[["User",["User"],function(v){User=v}]]);_bdd‍.w("../../services/JwtService",[["default",["JwtService"],function(v){JwtService=v}]]);





const registerController = {
  async register(req, res, next) {
    // CHECKLIST
    // [+] validate the request
    // [+] authorize the request
    // [+] check if user is in the database already
    // [+] prepare model
    // [+] store in database
    // [+] generate jwt token
    // [+] send response

    // validate
    const registerSchema = Joi.object({
      name: Joi.string().min(3).max(30).required(),
      email: Joi.string().email().required(),
      password: Joi.string()
        .pattern(new RegExp("^[a-zA-Z0-9]{3,30}$"))
        .required(),
      repeat_password: Joi.ref("password"),
    });
    const { error } = registerSchema.validate(req.body);

    if (error) {
      return next(error);
    }

    // check user is in the DB
    try {
      const exist = await User.exists({ email: req.body.email });
      if (exist) {
        return next(
          CustomErrorHandler.alreadyExist("This email is already taken.")
        );
      }
    } catch (err) {
      return next(err);
    }

    // Hash password for storing password in DB
    const { name, email, password } = req.body;
    const hashedPassword = await bcrypt.hash(password, 10);

    // prepare the model
    const user = new User({
      name,
      email,
      password: hashedPassword,
    });
    let access_token;
    try {
      const result = await user.save();
      // Token
      access_token = JwtService.sign({ _id: result._id, role: result.role });
    } catch (err) {
      return next(err);
    }
    // send response
    res.json({ access_token: access_token });
  },
};

_bdd‍.d(registerController);
