let Joi,bcrypt,RefreshToken,User,CustomErrorHandler,JwtService,REFRESH_SECRET;_069‍.x([["default",()=>_069‍.o]]);_069‍.w("joi",[["default",["Joi"],function(v){Joi=v}]]);_069‍.w("bcrypt",[["default",["bcrypt"],function(v){bcrypt=v}]]);_069‍.w("../../models",[["RefreshToken",["RefreshToken"],function(v){RefreshToken=v}],["User",["User"],function(v){User=v}]]);_069‍.w("../../services/CustomErrorHandler",[["default",["CustomErrorHandler"],function(v){CustomErrorHandler=v}]]);_069‍.w("../../services/JwtService",[["default",["JwtService"],function(v){JwtService=v}]]);_069‍.w("../../config",[["REFRESH_SECRET",["REFRESH_SECRET"],function(v){REFRESH_SECRET=v}]]);






const loginControllers = {
  async login(req, res, next) {
    //validate
    const loginSchema = Joi.object({
      email: Joi.string().email().required(),
      password: Joi.string()
        .pattern(new RegExp("^[a-zA-Z0-9]{3,30}$"))
        .required(),
    });

    const { error } = loginSchema.validate(req.body);
    if (error) {
      return next(error);
    }

    // check user detais present in DB
    let access_token;
    let refresh_token;
    try {
      const user = await User.findOne({ email: req.body.email });
      if (!user) {
        return next(CustomErrorHandler.wrongCredentials());
      }

      // compare the password
      const match = await bcrypt.compare(req.body.password, user.password);
      if (!match) {
        return next(CustomErrorHandler.wrongCredentials());
      }

      // Token
      access_token = JwtService.sign({ _id: user._id, role: user.role });
      refresh_token = JwtService.sign(
        { _id: user._id, role: user.role },
        "1y",
        REFRESH_SECRET
      );
      // database whitelist refresh token (store refresh token in DB)
      await RefreshToken.create({ refresh_token: refresh_token });
    } catch (err) {
      return next(err);
    }

    // send response
    res.json({ access_token, refresh_token });
  },
};

_069‍.d(loginControllers);
