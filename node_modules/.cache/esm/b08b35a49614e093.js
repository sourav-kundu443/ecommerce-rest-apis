let Joi,bcrypt,User,CustomErrorHandler,JwtService;_961‍.x([["default",()=>_961‍.o]]);_961‍.w("joi",[["default",["Joi"],function(v){Joi=v}]]);_961‍.w("bcrypt",[["default",["bcrypt"],function(v){bcrypt=v}]]);_961‍.w("../../models",[["User",["User"],function(v){User=v}]]);_961‍.w("../../services/CustomErrorHandler",[["default",["CustomErrorHandler"],function(v){CustomErrorHandler=v}]]);_961‍.w("../../services/JwtService",[["default",["JwtService"],function(v){JwtService=v}]]);





const loginControllers = {
  async login(req, res, next) {
    //validate
    const loginSchema = Joi.object({
      email: Joi.string().email().required(),
      password: Joi.string()
        .pattern(new RegExp("^[a-zA-Z0-9]{3,30}$"))
        .required(),
    });

    const { error } = loginSchema.validate(req.body);
    if (error) {
      return next(error);
    }

    // check user detais present in DB
    let access_token;
    try {
      const user = await User.findOne({ email: req.body.email });
      _961‍.g.console.log(user);
      if (!user) {
        return next(CustomErrorHandler.wrongCredentials());
      }

      // compare the password
      const match = await bcrypt.compare(req.body.password, user.password);
      if (!match) {
        return next(CustomErrorHandler.wrongCredentials());
      }

      // Token
      access_token = JwtService.sign({ _id: user._id, role: user.role });
    } catch (err) {
      return next(err);
    }

    // send response
    res.json({ access_token });
  },
};

_961‍.d(loginControllers);
